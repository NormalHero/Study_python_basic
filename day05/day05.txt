함수(메소드)
	이름 뒤에 소괄호
	단, 키워드 뒤에 소괄호는 함수가 아니다
	반복되는 코드,  행위, 기능들을 쉽게 관리하기 위해
	선언 후 호출하여 사용한다.
	모듈화의 시작

	f	(x)	=	2x+1
	함수	매개		리턴값
	이름	변수

함수 선언
	def ①함수명(②매개변수1,매개변수2,...):
		③실행할 문장
		④return 리턴값

	① 동사형으로 작성한다.( eat("마라샹궈")  eat("초밥") eat("육회") )
	② 생략 가능하다. 하지만 생략시에는 외부(사용하는 곳)에서 값을 전달받을 수 없고,
	여러 값이 필요한 경우에는 , 로 구분하여 값의 개수만큼 선언해준다.
	사용시에는 매개변수의 개수에 맞춰서 값을 전달해야 한다.
	③ 생략 가능하다.
	④ 생략 가능하다.

함수 선언 순서
	두 정수의 덧셈 함수

	1. 함수명을 생각한다.
		def add():
	2. 매개변수를 생각한다.
		def add(num1, num2):
	3. 실행할 문장을 생각한다.
		def add(num1, num2):
			print("두 정수의 덧셈 함수")
			result = num1+num2
	4. 리턴값을 생각한다.
		def add(num1, num2):
			print("두 정수의 덧셈 함수")
			result = num1+num2
			return result
			
함수 선언시 주의사항
	함수 안에 함수를 선언하지 않는다.
	매개변수가 없다면 외부에서 값을 전달받을 수 없다.
	리턴값이 있으면 사용하는 부분을 통째로 그 리턴값으로 봐야한다.
	리턴값이 없다면 사용부를 절대 값으로 봐서는 안된다.

함수 사용
	선언부에 있는 매개변수의 개수만큼 값을 넘겨주며 사용한다.

	함수명(값1,값2,...)	#매개변수가 있는 경우
	함수명()			#매개변수가 없는 경우

함수 사용 이유
	1. 반복되는 기능, 코드를 쉽게 관리하기 위해서
		재사용의 목적(특정성을 부여해서는 안된다.)
	2. 소스코드 간결화

리턴을 사용할 때
	함수 내에서 모든 작업이 완료되지 않았을 때
	사용하는 부분에서 할 작업이 더 남았을 때
	사용하는 부분에 함수 내의 작업 결과를 알려주어야 할 때

리턴을 사용하지 않을 때
	함수 내에서 모든 작업이 완료될 때














