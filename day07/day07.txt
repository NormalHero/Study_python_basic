클래스(반)
	반복되는 변수, 메소드들은 통합해서 관리 및 사용하기 위함
	공통된 요소들이 모여있는 것
	붕어빵 틀

	1. 주어이다.
		모든 문장 맨 앞에 클래스가 나오고
		영어는 맨 앞을 항상 대문자로 적는다.
		따라서 클래스는 주어이고 대문자로 시작한다.

		food = "banana"
		Monkey.eat(food);
		[주어] [동사][목적어]

	2. 타입이다.
		클래스는 추상적인 개념이고 이 클래스 안에는 필드가 존재한다.
		클래스는 추상적이고 실체화되지 않았기 때문에, 그 개념을
		구체화시킨 대상이 필요하다. 그게 바로 "객체"이다. (붕어빵)
		instance variable 이라 한다.

		instance는 예, 예시이고 추상적인 개념의 한 예시로서 객체가
		나오기 때문에 instance variable이라 부른다.
		(자동차인데 예를들어 내차 말이야~)
		[클래스]		[객체]

		추상적인 개념인 클래스로 객체를 만드는 작업을 객체화라고 한다.
		클래스는 그 때 만들어진 객체의 타입이다.

클래스 선언
	class 클래스명:
		변수1 = ""
		변수2 = 0
		...

		def 메소드1():
			수행할 문장

		def 메소드2():
			수행할 문장
		...

클래스 사용
	클래스는 추상적인 개념 자체이고 실체화 되어있지 않기 때문에
	객체를 생성하고 그 객체를 사용해야 한다. 클래스의 필드와 동일하게 생긴
	하나의 필드가 복사되면 그 필드 안에는 여러개의 값이 담길 수 있다.
	하나의 저장공간에는 한개의 값만 담을 수 있기 때문에 객체는 생성된
	그 필드의 주소값을 가지고 있게 된다.

	[객체화]
	객체명 = 클래스명()

	객체.변수
	객체.메소드()

생성자
	클래스명 뒤에 소괄호
	생성자는 함수, 메소드와 똑같이 사용 가능하지만
	리턴이 없기 때문에 메소드나 함수라고 부르지 않는다.
	클래스를 선언하게 되면 자동으로 생성자가 하나 만들어지고
	코드상에는 나타나지 않는다. 이런 생성자를 기본 생성자라고 하며
	만약 직접 생성자를 선언하게 되면 기본 생성자는 사라지게 된다.

생성자 호출시 일어나는 일
	1. 클래스의 틀과 똑같이 생긴 필드 하나를 메모리에 할당하고
	그 할당된 필드의 주소값을 가지고 온다.

	2. 생성자 선언부 내부에 있는 모든 코드를 실행한다.

self
	클래스 내부에 선언된 생성자나 메소드는 호출시 현재 접근한 객체를
	매개변수로 함께 받아온다. 클래스 내부에서는 하나의 메소드로
	여러 객체들을 다루어야 한다. 함께 받아온 self라는 매개변수에 담긴
	그 객체를 통해서 어떤 객체로 접근했는지를 구별할 수 있다.
	클래스 내부에 선언된 메소드에서 self.필드명 으로 접근하면
	여러 객체도 하나의 메소드에서 구별하여 다룰 수 있게된다.
	self는 객체 구별용 매개변수(가장 첫번째 매개변수로 선언)

생성자 선언
	def __init__(self,매개변수1,매개변수2,...):
		self.변수1 = 매개변수1
		self.변수2 = 매개변수2
		...

	생성자를 호출하게 되면 넘겨주는 값들은 매개변수1, 매개변수2,... 이 받고
	맨 앞에있는 self는 현재 생성중인 객체를 받아온다.
	실제 그 객체의 필드를 세팅해주기 위해서는 self에 담겨있는 생성중인 객체의
	필드에 세팅해야 한다. 따라서 self.변수1, self.변수2, ... 에 매개변수로
	넘어온 값들을 넣어줌으로써 필드를 세팅해 줄 수 있다.

생성자의 목적
	1. 객체생성
	2. 객체의 필드 초기화













