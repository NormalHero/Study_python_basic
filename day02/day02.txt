값
	데이터, 정보

변수
	값을 담는 저장공간

	x	=	10
	변수명	대입	값, 상수, 리터럴
		연산자

=(대입 연산자)
	오른쪽에 있는 값을 왼쪽의 저장공간에 넣어라

자료형

자료형	type	크기		값

문자열	str	???		"Hello", 'a', ...
정수형	int	3.5 이상은 X	10, 0, -317, ...
실수형	float	8 byte		10.77, 0.0, -14.11, ...
--------------------------------------------------------
컬렉션	X	X		[], (), ...

변수의 선언
	초기화 : 공간에 값을 넣어주는 것

	변수명 = 값

변수 선언시 RAM
	x = 0
	x라는 이름의 저장공간이 RAM에 할당되고 0이라는 값이 들어간다

주소
	저장공간이 RAM에 할당되면 고유한 값인 주소값이 부여된다.
	우리는 알 수 없음.

변수 선언시 주의사항
	1. 변수 선언시 기존에 같은 이름의 공간이 있다면 새로 할당되지 않고
	기존의 공간에 새로운 값만 들어간다.
	x=10
	x=20#덮어쓰기

	2. 초기화를 해준다.
	3. 되도록 선언부(소스코드 상단)에 한꺼번에 선언한다.

변수명 주의사항
	되도록 소문자만 사용한다.
	숫자는 맨 앞에 쓸 수 없다(1num -> num1)
	특수문자는 사용할 수 없다.
	공백은 사용할 수 없다.
	단, _는 사용 가능하다.(no_where)

	카멜 표기법 : noWhere

	명사형으로 의미있는 단어를 사용한다.
	a,b,c,d,....		(X)
	num,data,height,...	(O)

변수의 사용 이유
	1. 의미가 같은 반복되는 값을 쉽게 관리하기 위해서
	2. 값에 의미부여를 하기 위해서
		height = 178.326
		print(height)

입력
	사용자가 개발자에게 값을 넘겨주는 행위

입력 상태
	커서가 깜빡이면서 값이 들어오기를 기다리는 상태
	개발자가 할 수 있는일은 사용자에게 입력상태로 만들어주는것 까지이다.
	아래에 있는 코드들은 입력된 값이 있다고 가정하고 작성한다.

입력 함수
	input("사용자에게 보여줄 문자열")
	사용부분 통째로가 사용자가 입력한 값이다.

형변환
	자동 형변환
		정수 + 실수 --> 실수
		3 + 0.0 --> 3.0

	강제 형변환
		자료형(값)
		
		float(3) --> 3.0
		int("10") --> 10
		str(10) --> "10"

문자열
	문자가 나열된 타입
	
	index : 방번호
	"Hello"[1] : 'e'		인덱싱
	"Hello"[0:3] : "Hel"		슬라이싱

문자열 메소드
	"문자열".split()
	"문자열".find()
	"문자열".count()
	"문자열".upper()
	"문자열".lower()
	"문자열".replace()

컬렉션
	여러 값들을 모아놓은 자료형

	리스트, 튜플, 셋, 딕셔너리

리스트
	컬렉션들 중 가장 많이 사용되는 자료형
	요소의 추가, 수정, 삭제, 읽기 가능하다. CRUD
	각 요소들마다 방번호(index)가 주어져서 접근하기 쉽다.

리스트 생성
	리스트명 = [값1,값2,...]
	리스트명 = list()

리스트에 요소 추가하기
	리스트명.append(값)	: 맨 뒤에 요소 추가하기
	리스트명.insert(위치,값)	: 리스트의 해당하는 위치에 값을 삽입하기

리스트의 요소 수정하기
	리스트명[인덱스] = 새로운값

리스트의 요소 삭제하기
	리스트명.remove(값)	: 해당 리스트에서 그 값을 삭제
	리스트명.pop()	 	: 해당 리스트의 가장 마지막 값을 삭제
				값을 삭제하면서 돌려줌
	del 리스트명[인덱스]	: 해당 인덱스의 방을 삭제

리스트의 특징
	리스트는 하나의 이름으로 여러 값들을 관리해야 한다.
	이름이 하나라는 뜻은 공간도 한개라는 뜻이다.
	공간 한개에는 여러 값들을 담을 수 없기 때문에
	실제 값들은 이름이 없는곳에 나열된 채 생성된다.
	그 나열된 공간의 가장 첫번째 주소를 기억한다면,
	나머지 공간들은 한번씩 이동으로 접근이 가능하다.
	따라서 리스트명 변수는 나열된 공간의 첫번째 주소를
	기억하게 되고 그 주소로 이동한 후 몇번 더 이동하는지가
	인덱스 번호가 된다. 그러므로 인덱스 번호는 0번부터 시작한다.
	
	리스트명[인덱스] : 리스트명이 가지고있는 주소로 가서 인덱스만큼
			추가 이동한 공간

튜플
	인덱스로 접근이 가능하지만 수정, 삭제가 불가능하다.

튜플 생성
	튜플명 = (값1,값2,...)
	튜플명 = 값1,값2,..
	튜플명 = tuple()

튜플에 요소 추가하기
	튜플1 = 튜플1+튜플2

	ex)
	tuple1 = (10,20)
	tuple1 = tuple1+(40,50) #여러 요소 추가 tuple1 : (10,20,40,50)
	tuple1 = tuple1+(60,)

	print(tuple1[2])














